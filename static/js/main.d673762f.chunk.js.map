{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","video1","document","getElementById","video2","video3","useState","mouseHoverOnVid1","setMouseHoverOnVid1","mouseHoverOnVid2","setMouseHoverOnVid2","mouseHoverOnVid3","setMouseHoverOnVid3","showSideScreenForVid1","setShowSideScreenForVid1","showSideScreenForVid2","setShowSideScreenForVid2","showSideScreenForVid3","setShowSideScreenForVid3","inputForVid1","setInputForVid1","inputForVid2","setInputForVid2","inputForVid3","setInputForVid3","hoverOnVid1Handler","hoverOnVid2Handler","hoverOnVid3Handler","showSideScreenForVid1Handler","showSideScreenForVid2Handler","showSideScreenForVid3Handler","useEffect","play","className","onClick","type","onInput","event","target","value","onKeyUp","keyCode","alert","id","src","onMouseEnter","onMouseLeave","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d673762f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n\nfunction App() {\n  const video1 = document.getElementById('video1')\n  const video2 = document.getElementById('video2')\n  const video3 = document.getElementById('video3')\n  const [mouseHoverOnVid1, setMouseHoverOnVid1] = useState(false)\n  const [mouseHoverOnVid2, setMouseHoverOnVid2] = useState(false)\n  const [mouseHoverOnVid3, setMouseHoverOnVid3] = useState(false)\n  const [showSideScreenForVid1, setShowSideScreenForVid1] = useState(false)\n  const [showSideScreenForVid2, setShowSideScreenForVid2] = useState(false)\n  const [showSideScreenForVid3, setShowSideScreenForVid3] = useState(false)\n  const [inputForVid1, setInputForVid1] = useState('')\n  const [inputForVid2, setInputForVid2] = useState('')\n  const [inputForVid3, setInputForVid3] = useState('')\n\n  const hoverOnVid1Handler = () => {\n    setMouseHoverOnVid1(!mouseHoverOnVid1)\n  }\n  const hoverOnVid2Handler = () => {\n    setMouseHoverOnVid2(!mouseHoverOnVid2)\n  }\n  const hoverOnVid3Handler = () => {\n    setMouseHoverOnVid3(!mouseHoverOnVid3)\n  }\n  const showSideScreenForVid1Handler = () => {\n    setShowSideScreenForVid1(!showSideScreenForVid1)\n  }\n  const showSideScreenForVid2Handler = () => {\n    setShowSideScreenForVid2(!showSideScreenForVid2)\n  }\n  const showSideScreenForVid3Handler = () => {\n    setShowSideScreenForVid3(!showSideScreenForVid3)\n  }\n\n  const inputForVid1Handler = (event) => {\n    if (event.keyCode === 13) {\n      if (inputForVid1 === 'meow') {\n        alert('Yes! MEOW!')\n      } else {\n        alert('nope.')\n      }\n    }\n  }\n  const inputForVid2Handler = (event) => {\n    if (event.keyCode === 13) {\n      if (inputForVid2 === 'good') {\n        alert('Yes! The Good!')\n      } else {\n        alert('nope.')\n      }\n    }\n  }\n  const inputForVid3Handler = (event) => {\n    if (event.keyCode === 13) {\n      if (inputForVid3 === 'brainz') {\n        alert('Yum!')\n      } else {\n        alert('nope.')\n      }\n    }\n  }\n\n  useEffect(() => {\n    mouseHoverOnVid1 && video1.play()\n    mouseHoverOnVid2 && video2.play()\n    mouseHoverOnVid3 && video3.play()\n  }, [\n    mouseHoverOnVid1,\n    video1,\n    mouseHoverOnVid2,\n    video2,\n    mouseHoverOnVid3,\n    video3,\n  ])\n\n  return (\n    <div className='App'>\n      {showSideScreenForVid1 && (\n        <>\n          <div className='sidescreen'>\n            <h3>You have clicked on a typing cat.</h3>{' '}\n            <p>\n              Lorem ipsum dolor, sit amet consectetur adipisicing elit. Amet\n              neque libero, odio laboriosam cupiditate, incidunt sequi unde quae\n              rerum corporis aliquam alias. Officiis aut voluptatum ratione\n              harum temporibus placeat culpa?\n            </p>\n            <button onClick={showSideScreenForVid1Handler}>\n              click to close\n            </button>\n            <p>type in \"meow\" then press Enter</p>\n            <input\n              type='text'\n              onInput={(event) => setInputForVid1(event.target.value)}\n              onKeyUp={inputForVid1Handler}\n            ></input>\n          </div>\n          <div className='coverscreen'></div>\n        </>\n      )}\n      {showSideScreenForVid2 && (\n        <>\n          <div className='sidescreen'>\n            <h3>You have clicked on Clint Eastwood.</h3>{' '}\n            <p>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Fugit\n              sapiente neque laboriosam unde iusto debitis voluptates\n              consequuntur blanditiis aspernatur nemo, molestias architecto quae\n              qui placeat perspiciatis delectus consequatur repudiandae tempora.\n            </p>\n            <button onClick={showSideScreenForVid2Handler}>\n              click to close\n            </button>\n            <p>type in \"good\" then press Enter</p>\n            <input\n              type='text'\n              onInput={(event) => setInputForVid2(event.target.value)}\n              onKeyUp={inputForVid2Handler}\n            ></input>\n          </div>\n          <div className='coverscreen'></div>\n        </>\n      )}\n      {showSideScreenForVid3 && (\n        <>\n          <div className='sidescreen'>\n            <h3>You have clicked on a zombie.</h3>{' '}\n            <p>\n              Lorem ipsum dolor sit amet consectetur adipisicing elit. Labore\n              dicta, repudiandae similique quas alias dolore distinctio. Illum,\n              quidem inventore! Eveniet aut quia inventore unde. Modi\n              reprehenderit quia exercitationem doloremque nam.\n            </p>\n            <button onClick={showSideScreenForVid3Handler}>\n              click to close\n            </button>\n            <p>type in \"brainz\" then press Enter</p>\n            <input\n              type='text'\n              onInput={(event) => setInputForVid3(event.target.value)}\n              onKeyUp={inputForVid3Handler}\n            ></input>\n          </div>\n          <div className='coverscreen'></div>\n        </>\n      )}\n      <video\n        id='video1'\n        className='clickable'\n        src='https://media.giphy.com/media/LHZyixOnHwDDy/giphy.mp4'\n        onMouseEnter={hoverOnVid1Handler}\n        onMouseLeave={hoverOnVid1Handler}\n        onClick={showSideScreenForVid1Handler}\n      >\n        Your browser doesn't support HTML5 video tag.\n      </video>\n      <video\n        id='video2'\n        className='clickable'\n        src='https://media.giphy.com/media/IRQBDU7x2LZUQ/giphy.mp4'\n        onMouseEnter={hoverOnVid2Handler}\n        onMouseLeave={hoverOnVid2Handler}\n        onClick={showSideScreenForVid2Handler}\n      >\n        Your browser doesn't support HTML5 video tag.\n      </video>\n      <video\n        id='video3'\n        className='clickable'\n        src='https://media.giphy.com/media/I0Z7xEnYL3Fu0/giphy.mp4'\n        onMouseEnter={hoverOnVid3Handler}\n        onMouseLeave={hoverOnVid3Handler}\n        onClick={showSideScreenForVid3Handler}\n      >\n        Your browser doesn't support HTML5 video tag.\n      </video>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}